{"version":3,"sources":["webpack:///./src/views/doc-markdown/font-family.md?4f45","webpack:///src/views/doc-markdown/font-family.md","webpack:///./src/views/doc-markdown/font-family.md?f21a","webpack:///./src/views/doc-markdown/font-family.md","webpack:///./src/views/doc-markdown/proxy.md?11a5","webpack:///src/views/doc-markdown/proxy.md","webpack:///./src/views/doc-markdown/proxy.md?b271","webpack:///./src/views/doc-markdown/proxy.md","webpack:///./src/views/doc-markdown/index.js"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","_v","pre","attrs","component","FontFamily","DocumentProxy"],"mappings":"2KAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,UAAU,CAACA,EAAG,IAAI,CAACL,EAAIQ,GAAG,2GAA2GH,EAAG,aAAa,CAACA,EAAG,MAAM,CAACI,KAAI,GAAM,CAACJ,EAAG,OAAO,CAACI,KAAI,EAAKC,MAAM,CAAC,QAAQ,KAAK,CAACV,EAAIQ,GAAG,yJAAiKH,EAAG,IAAI,CAACL,EAAIQ,GAAG,8CAA8CH,EAAG,aAAa,CAACA,EAAG,IAAI,CAACL,EAAIQ,GAAG,qBAAqBH,EAAG,IAAI,CAACL,EAAIQ,GAAG,6CAA6CH,EAAG,IAAI,CAACL,EAAIQ,GAAG,6CAA6CH,EAAG,IAAI,CAACL,EAAIQ,GAAG,gFAAgFH,EAAG,IAAI,CAACL,EAAIQ,GAAG,6CAA6CH,EAAG,IAAI,CAACL,EAAIQ,GAAG,yDAAyDH,EAAG,IAAI,CAACL,EAAIQ,GAAG,iFAAiFH,EAAG,IAAI,CAACL,EAAIQ,GAAG,+CCoBriC,kBCrBmU,I,YCO/TG,EAAY,eACd,EACAZ,EACAQ,GACA,EACA,KACA,KACA,MAIa,aAAAI,E,oDClBf,IAAIZ,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAsBH,EAAII,MAAMC,GAAO,OAAOL,EAAIM,GAAG,IACnGC,EAAkB,CAAC,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBE,EAAGL,EAAII,MAAMC,IAAIH,EAAG,OAAOG,EAAG,UAAU,CAACA,EAAG,IAAI,CAACL,EAAIQ,GAAG,iWCGvI,kBCJ6T,I,YCOzTG,EAAY,eACd,EACAZ,EACAQ,GACA,EACA,KACA,KACA,MAIa,aAAAI,E,6CClBf,mCAGe,cACbC,wBACAC","file":"js/doc-markdown.3c31a38e.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',[_c('p',[_vm._v(\"浏览器中展示网页文字内容时，文字字体都会按照设计师在css中定义的字体族的顺序来进行显示。什么是字体族？字体族就是你在css代码中看到“font-family”的代码内的一类字体名称，例如下面这行代码：\")]),_c('blockquote',[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"v-pre\":\"\"}},[_vm._v(\"\\nfont-family: Georgia, \\\"Times New Roman\\\", \\n             \\\"Microsoft YaHei\\\", \\\"微软雅黑\\\", \\n             STXihei, \\\"华文细黑\\\", \\n             serif;\\n \\n\")])])]),_c('p',[_vm._v(\"CSS的font-family命令，指定了网页元素所使用的字体。它的规则有三条。\")]),_c('blockquote',[_c('p',[_vm._v(\"（1）优先使用排在前面的字体。\")]),_c('p',[_vm._v(\"（2）如果找不到该种字体，或者该种字体不包括所要渲染的文字，则使用下一种字体。\")]),_c('p',[_vm._v(\"（3）如果所列出的字体，都无法满足需要，则让操作系统自行决定使用哪种字体。\")])]),_c('p',[_vm._v(\"**根据这些规则，font-family应该优先指定英文字体，然后再指定中文字体。**否则，中文字体所包含的英文字母，会取代英文字体，这往往很丑陋。\")]),_c('p',[_vm._v(\"[图片上传失败...(image-254f5b-1571971948613)]\")]),_c('p',[_vm._v(\"上面图片中，红框内的英文字母，左边采用英文字体渲染，右边采用中文字体渲染，哪一种效果比较好，一目了然。\")]),_c('p',[_vm._v(\"**为了保证兼容性，中文字体的中文名称和英文名称，应该都写入font-family。**比如，”微软雅黑”的英文名称是Microsoft YaHei。\")]),_c('p',[_vm._v(\"此外，中文字体的中文名称，以及由多个单词组成的英文名称，应该放在双引号内。\")])])}]\n\nexport { render, staticRenderFns }","<template><section><p>浏览器中展示网页文字内容时，文字字体都会按照设计师在css中定义的字体族的顺序来进行显示。什么是字体族？字体族就是你在css代码中看到“font-family”的代码内的一类字体名称，例如下面这行代码：</p>\n<blockquote>\n<pre v-pre><code v-pre>\nfont-family: Georgia, &quot;Times New Roman&quot;, \n             &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, \n             STXihei, &quot;华文细黑&quot;, \n             serif;\n \n</code></pre>\n</blockquote>\n<p>CSS的font-family命令，指定了网页元素所使用的字体。它的规则有三条。</p>\n<blockquote>\n<p>（1）优先使用排在前面的字体。</p>\n<p>（2）如果找不到该种字体，或者该种字体不包括所要渲染的文字，则使用下一种字体。</p>\n<p>（3）如果所列出的字体，都无法满足需要，则让操作系统自行决定使用哪种字体。</p>\n</blockquote>\n<p>**根据这些规则，font-family应该优先指定英文字体，然后再指定中文字体。**否则，中文字体所包含的英文字母，会取代英文字体，这往往很丑陋。</p>\n<p>[图片上传失败...(image-254f5b-1571971948613)]</p>\n<p>上面图片中，红框内的英文字母，左边采用英文字体渲染，右边采用中文字体渲染，哪一种效果比较好，一目了然。</p>\n<p>**为了保证兼容性，中文字体的中文名称和英文名称，应该都写入font-family。**比如，”微软雅黑”的英文名称是Microsoft YaHei。</p>\n<p>此外，中文字体的中文名称，以及由多个单词组成的英文名称，应该放在双引号内。</p>\n</section></template><script>export default {components:{}}</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../node_modules/vue-md-loader/index.js!./font-family.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../node_modules/vue-md-loader/index.js!./font-family.md?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./font-family.md?vue&type=template&id=2bbf5dc1&\"\nimport script from \"./font-family.md?vue&type=script&lang=js&\"\nexport * from \"./font-family.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',[_c('p',[_vm._v(\"######1、正向代理指的是服务端向客户端发起请求时，不直接发送给客户端而是通过代理服务器转发给客户端（因场景限制、安全要求、性能要求），此时代理服务器就相当于客户端，对于服务端来说真正的客户端是不可见的，这种代理方式我们称之为正向代理。 ######2、反向代理指的客户端向服务端发起请求时，不直接发给服务端而是通过代理服务器转发给服务端（因场景限制、安全要求、性能要求），此时代理服务器就相当于服务端，对于客户端来说真正的服务端是不可见的，这种代理方式我们称之为反向代理。 #####总结一下就是，两种代理方式在技术实现上是完全相同的，区别就在于请求的流向不同。 在网上看到各种五花八门的解释，感觉将简单的问题复杂化了，甚至有些误导。在这里我写下个人理解，有不同意见欢迎留言讨论。\")])])}]\n\nexport { render, staticRenderFns }","<template><section><p>######1、正向代理指的是服务端向客户端发起请求时，不直接发送给客户端而是通过代理服务器转发给客户端（因场景限制、安全要求、性能要求），此时代理服务器就相当于客户端，对于服务端来说真正的客户端是不可见的，这种代理方式我们称之为正向代理。\n######2、反向代理指的客户端向服务端发起请求时，不直接发给服务端而是通过代理服务器转发给服务端（因场景限制、安全要求、性能要求），此时代理服务器就相当于服务端，对于客户端来说真正的服务端是不可见的，这种代理方式我们称之为反向代理。\n#####总结一下就是，两种代理方式在技术实现上是完全相同的，区别就在于请求的流向不同。\n在网上看到各种五花八门的解释，感觉将简单的问题复杂化了，甚至有些误导。在这里我写下个人理解，有不同意见欢迎留言讨论。</p>\n</section></template><script>export default {components:{}}</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../node_modules/vue-md-loader/index.js!./proxy.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../node_modules/vue-md-loader/index.js!./proxy.md?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./proxy.md?vue&type=template&id=00a8ce03&\"\nimport script from \"./proxy.md?vue&type=script&lang=js&\"\nexport * from \"./proxy.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import FontFamily from './font-family.md';\r\nimport DocumentProxy from './proxy.md';\r\n\r\nexport default {\r\n  FontFamily,\r\n  DocumentProxy,\r\n};\r\n"],"sourceRoot":""}